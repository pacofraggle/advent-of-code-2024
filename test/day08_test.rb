# frozen_string_literal: true

require_relative "test_helper"

module Advent2024
  class ResonantCollinearityTest < Minitest::Test

    def sample
      str = <<~EOS
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
      EOS

      str
    end

    def test_create_city_sample
      res = build_problem(sample)

      assert_equal ["0", "A"], res.antennas.keys
      assert_equal 4, res.antennas["0"].size
      assert_equal 3, res.antennas["A"].size
    end

    def test_basic_antinodes
      str = <<~EOS
..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........
      EOS

      res = build_problem(str)
      antinodes = res.antinodes_for("a")

      assert_equal 2, antinodes.size
      assert antinodes.include?(Advent2024::Coord.new(1, 3))
      assert antinodes.include?(Advent2024::Coord.new(7, 6))
    end

    def test_discards_out_of_bounds_antinodes
      str = <<~EOS
..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........
      EOS

      res = build_problem(str)
      antinodes = res.antinodes_for("a")

      assert_equal 4, antinodes.size
      assert antinodes.include?(Advent2024::Coord.new(1, 3))
      assert antinodes.include?(Advent2024::Coord.new(7, 6))
      assert antinodes.include?(Advent2024::Coord.new(2, 0))
      assert antinodes.include?(Advent2024::Coord.new(6, 2))
    end

    def test_antinode_overlapping_antenna
      str = <<~EOS
..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
..........
      EOS

      res = build_problem(str)
      antinodes = res.antinodes_for("a")

      assert_equal 4, antinodes.size
      assert antinodes.include?(Advent2024::Coord.new(1, 3))
      assert antinodes.include?(Advent2024::Coord.new(7, 6))
      assert antinodes.include?(Advent2024::Coord.new(2, 0))
      assert antinodes.include?(Advent2024::Coord.new(6, 2))

      antinodes = res.antinodes_for("A")
      assert_equal 0, antinodes.size
    end

    def test_total_unique_antinode_locations
      res = build_problem(sample)

      assert_equal 0, res.unique_antinode_locations.size
      res.calculate_all_antinodes
      assert_equal 14, res.unique_antinode_locations.size
    end

    def test_antinodes_with_harmonics
      str = <<~EOS
T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........
      EOS

      res = build_problem(str)

      assert_equal 0, res.unique_antinode_locations.size
      res.calculate_all_antinodes_with_harmonics
      assert_equal 9, res.unique_antinode_locations.size
    end

    def test_total_unique_antinode_locations_with_harmonics
      res = build_problem(sample)

      assert_equal 0, res.unique_antinode_locations.size
      res.calculate_all_antinodes_with_harmonics
      assert_equal 34, res.unique_antinode_locations.size
    end

    def build_problem(str)
      map = Advent2024::Map.from_string(str)

      ResonantCollinearity.new(map)
    end
  end
end
